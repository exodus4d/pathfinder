
user  nginx;
worker_processes  4;
worker_rlimit_nofile 20000;

daemon off;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections            1024;
    multi_accept                  on;
    use                           epoll;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    charset_types text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          '"$host" sn="$server_name" '
                          'rt=$request_time '
                          'ua="$upstream_addr" us="$upstream_status" '
                          'ut="$upstream_response_time" ul="$upstream_response_length" '
                          'cs=$upstream_cache_status' ;

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      off;
    tcp_nodelay     on;

    keepalive_timeout  65;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream ws_dev_map_update {
    server websocket:8020;
  }

  upstream ws_prod_map_update {
    server websocket:8020;
  }

  fastcgi_connect_timeout 5s;
  fastcgi_read_timeout 40s;
  fastcgi_send_timeout  15s;

  client_header_buffer_size 1k;

  # The maximum number and size of buffers for large client headers.
  large_client_header_buffers 4 4k;

  # The maximum allowed size for a client request. If the maximum size is exceeded, then Nginx will spit out a 413 error or Request Entity Too Large. (Default: 1m)
  # php max upload limit cannot be larger than this
  client_max_body_size 8m;

  # This handles the client buffer size, meaning any POST actions sent to Nginx. POST actions are typically form submissions.
  client_body_buffer_size 32k;

  output_buffers                        2 32k;

  fastcgi_buffering                     on;
  fastcgi_buffers                       8 32k;
  fastcgi_buffer_size                   32k;

  # Caching ==================================================================================================================

  # Above sample tells nginx to cache a file information as long as minimum 2 requests are made during 5m window.
  open_file_cache                       max=10000 inactive=5m;
  open_file_cache_valid                 2m;
  open_file_cache_min_uses              1;
  open_file_cache_errors                on;

   # Enable Gzip compressed.
  gzip on;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  # gzip_proxied expired no-cache no-store private auth;
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
    # text/html;

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  gzip_static off;

    include /etc/nginx/conf.d/*.conf;
}
